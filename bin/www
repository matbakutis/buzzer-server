#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('buzzer-server:server');
var http = require('http');
const socketIO = require('socket.io')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Socket.io config
 */
const io = socketIO(server)
const usersArray = [];

io.on('connection', socket => {
  console.log('New client connected')

  socket.on('userConnected', (user) => {
    console.log('userConnected', user.name, user.color)
    usersArray.push({name: user.name, color: user.color, id: socket.id})
    io.emit('updateUsers', usersArray)
  })

  socket.on('adminConnected', () => {
    console.log('admin connected')
    io.emit('updateUsers', usersArray)
  })

  socket.on('adminClear', () => {
    console.log('admin cleared users to black')
    for (let i = 0; i < usersArray.length; i++) {
      usersArray[i].color = 'black';
    };
    io.emit('updateUsers', usersArray)
  })

  socket.on('userUpdate', (updatedUser) => {
    const foundUser = usersArray.find((user)=>{
      return user.id === updatedUser.id
    })
    usersArray[usersArray.indexOf(foundUser)] = updatedUser;
    console.log(usersArray)
    io.emit('updateUsers', usersArray)
  })

  socket.on('disconnect', (disconnectedUser) => {
    console.log(disconnectedUser);
    console.log('user disconnected')
    const foundUser = usersArray.find((user)=>{
      return user.id === disconnectedUser.id
    })
    usersArray.splice(usersArray.indexOf(foundUser),1);
    io.emit('updateUsers', usersArray)
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
